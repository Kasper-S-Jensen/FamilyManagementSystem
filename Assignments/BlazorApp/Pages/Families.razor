@page "/Families"
@using BlazorApp.Data
@using BlazorApp.Models
@using Microsoft.Net.Http.Headers

@inject NavigationManager NavigationManager
@inject IFamilyData familyData
@inject IJSRuntime JSRuntime


<h2>Families</h2>

@if (allFamilies == null)
{
    <p>
        <em>Please wait..</em>
    </p>
}
else
{
    <EditForm Model="@currentFamily">
        <InputSelect class="form-control col-sm-4" Value="@currentFamily.StreetName"
                     ValueChanged="@((string arg) => FilterByFamily(arg))"
                     ValueExpression="@(() => currentFamily.StreetName)">
            <option value="none">-- Select streetname --</option>

            @foreach (var family in allFamilies)
            {
                <option value="@family.StreetName"> @family.StreetName</option>
            }
        </InputSelect>
        @if (currentFamily.StreetName == null)
        {
            <p>
                <em>Please select a streetname</em>
            </p>
        }
        else
        {
            <InputSelect class="form-control col-sm-4" @bind-Value="@currentFamily.HouseNumber" @onclick="@(() => FilterFamilies())">
                <option value="none">-- Select housenumber --</option>
                @foreach (var number in houseNumbers)
                {
                    <option bind-value="@currentFamily.HouseNumber"> @number</option>
                }
            </InputSelect>
        }
    </EditForm>
}

@if (familiesToShow == null)
{
    <p>
        <em>Please select a family</em>
    </p>
}
else if (!familiesToShow.Any())
{
    <p>
        <em>No families exist. Please add some.</em>
    </p>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-sm-4 ">
                <h3>Adults</h3>
                <table class="table table-hover table-striped thead-dark table-light table-bordered">
                    <thead>
                    <tr>
                        <th>Firstname</th> <th>Lastname</th><th>Age</th><th>Job</th><th>Salary</th><th>Remove</th>
                    </tr>
                    </thead>
                    <tbody>

                    @foreach (var family in familiesToShow)
                    {
                        @foreach (var adult in family.Adults)
                        {
                            <tr>
                                <td>@adult.FirstName</td>
                                <td>@adult.LastName</td>
                                <td>@adult.Age</td>
                                 <td>@adult.Job.JobTitle</td> 
                                 <td>@adult.Job.Salary</td> 
                                <AuthorizeView Policy="SecurityLevel5">
                                    <td>
                                        <button @onclick="@(() => RemoveAdult(adult.Id))" class="btn btn-light">
                                            <i class="oi oi-trash" style="color:red"/>
                                        </button>
                                    </td>
                                </AuthorizeView>
                            </tr>
                        }
                        <td colspan="2">
                            <p class="font-weight-bold">Family pets:</p> @family.PetsToString()
                        </td>
                    }
                    </tbody>
                </table>
                <AuthorizeView Policy="SecurityLevel5">
                    <div>
                        <button @onclick="@(() => RemoveFamily(currentFamily.StreetName, currentFamily.HouseNumber))" class="btn btn-primary"> Remove family </button>
                    </div>
                </AuthorizeView>
            </div>

            @if (familiesToShow == null)
            {
                <p>
                    <em>Loading...</em>
                </p>
            }
            else if (!familiesToShow.Any())
            {
                <p>
                    <em>No adults exist. Please add some.</em>
                </p>
            }
            else
            {
                <div class="col-sm-4 offset-2">
                    <h3>Children</h3>
                    <table class="table table-hover table-striped thead-dark table-light table-bordered">
                        <thead>
                        <tr>
                            <th>Firstname </th> <th>Lastname</th> <th>Age</th> <th>Interests</th><th>Pets</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var family in familiesToShow)
                        {
                            @foreach (var child in family.Children)
                            {
                                <tr>


                                    <td>@child.FirstName</td>
                                    <td>@child.LastName</td>
                                    <td>@child.Age</td>
                                    <td>@child.InterestsToString()</td>
                                    <td>@child.PetsToString()</td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}
@* </div> *@


@code {

    private IList<Family> familiesToShow;
    private IList<int> houseNumbers = new List<int>();
    private IList<Family> allFamilies;
    private Family currentFamily = new Family();
    private string? filterByString;


    protected override async Task OnInitializedAsync()
    {
       await Updatefamilies();
    }

    private async Task Updatefamilies()
    {
        allFamilies = await familyData.GetFamiliesAsync();
        familiesToShow = null;
    }

    private void FilterByFamily(string streetName)
    {
        currentFamily.StreetName = streetName;

        houseNumbers.Clear();
        foreach (var family in allFamilies)
        {
            if (family.StreetName.Equals(currentFamily.StreetName))
            {
                houseNumbers.Add(family.HouseNumber);
            }
        }
    }

    private void FilterFamilies()
    {
        ExecuteFamilyFilter();
        Console.WriteLine("inside filterfamilies filter");
    }

    private void ExecuteFamilyFilter()
    {
        familiesToShow = allFamilies.Where(f => (currentFamily.StreetName.Equals(f.StreetName) && currentFamily.HouseNumber == f.HouseNumber && currentFamily.StreetName != null)).ToList();
        Console.WriteLine("inside executefamilyfilter");
    }


    private async Task RemoveAdult(int adultId)
    {
        await familyData.RemoveAdultAsync(adultId);
        await Updatefamilies();
    }

    private async Task RemoveFamily(string streetName, int houseNumber)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove the family at '{currentFamily.StreetName} {currentFamily.HouseNumber}', and all of its members?"))
            return;
        Console.WriteLine(currentFamily.HouseNumber + currentFamily.StreetName);

        Family familyToRemove = allFamilies.FirstOrDefault(f => (currentFamily.StreetName.Equals(f.StreetName) && currentFamily.HouseNumber == f.HouseNumber && currentFamily.StreetName != null));
        await familyData.RemoveFamilyAsync(streetName, houseNumber);
        allFamilies.Remove(familyToRemove);
        familiesToShow.Remove(familyToRemove);
        await Updatefamilies();
    }


}
