@using BlazorApp.Pages
@using BlazorApp.Authentication
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">BlazorApp</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="families" Match="NavLinkMatch.All">
                <span class="oi oi-person" aria-hidden="true"></span> Families
            </NavLink>
        </li>
           <AuthorizeView Policy="SecurityLevel5">
           <li class="nav-item px-3">
               <NavLink class="nav-link" href="Creation" Match="NavLinkMatch.All">
                   <span class="oi oi-people" aria-hidden="true"></span> God creator mode
               </NavLink>
           </li>
              </AuthorizeView>
        <li class="nav-item px-3">
            <NavLink class="nav-link" @onclick="LogOut" Match="NavLinkMatch.All">
                <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
            </NavLink>
        </li>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public async Task LogOut()
    {
        try
        {
            ((CustomAuthenticationStateProvider) authenticationStateProvider).Logout();
            navigationManager.NavigateTo("/login");
        }
        catch (Exception e)
        {
        }
    }

}